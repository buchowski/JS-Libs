{"majorversion": 2, "filemap": {"clipboard.js": {"classlist": ["ClipBoard"], "name": "clipboard.js", "module": "Utils"}, "dialogs.js": {"classlist": ["Dialogs"], "name": "dialogs.js", "module": "Widgets"}, "Api.js": {"classlist": ["F.API.APIConnection", "F.APIUtils", "F.API.Data"], "name": "Api.js", "module": "Net"}, "AdminApi.js": {"classlist": ["F.API.Archive"], "name": "AdminApi.js", "module": "Net"}, "utils.js": {"classlist": ["F.", "F.String", "F.XML", "F.Array", "F.Object", "F.Net"], "name": "utils.js", "module": "Net"}, "net.js": {"classlist": ["AjaxConnection", "PollingConnection"], "name": "net.js", "module": "API"}}, "modules": {"Widgets": {"description": "UI widgets being used across simulations", "submodules": [], "classlist": ["ClipBoard", "Dialogs"], "author": "Naren", "filelist": ["dialogs.js"], "subdata": {}, "name": "Widgets"}, "Net": {"name": "Net", "author": "Naren", "classlist": ["F.API.Archive", "F.API.APIConnection", "AjaxConnection", "PollingConnection"], "submodules": [], "filelist": ["AdminApi.js", "Api.js", "utils.js"], "subdata": {}, "description": "All utility classes and functions related to establishing Ajax connections"}, "API": {"description": "Adpators to perform operations on all Forio APIs.", "submodules": [], "classlist": ["F.APIUtils", "F.API.Data"], "filelist": ["net.js"], "subdata": {}, "see": "http://sites.google.com/a/forio.com/documentation/api-documentation", "guessedname": "API", "guessedtype": "property", "name": "API"}, "Utils": {"description": "Utility functions", "submodules": [], "classlist": ["F.", "F.String", "F.XML", "F.Array", "F.Object", "F.Net"], "filelist": ["clipboard.js"], "subdata": {}, "name": "Utils"}}, "classmap": {"PollingConnection": {"return": "{this}", "name": "PollingConnection", "constructors": [{"params": [{"type": "String", "name": "url", "description": " url to connect to; Assumed to be JSON"}, {"type": "*", "name": "conditionFlags", "description": " List of conditions to check result against. Set this to blank and provide a onPulse fn for infinite polling."}, {"type": "Object", "name": "options", "description": " to AjaxConnection"}], "description": "Polls a specified url for a value"}], "namespace": "", "module": "Net", "guessedname": "PollingConnection", "methods": {"cancel": {"description": "Stop polling", "guessedname": "cancel", "guessedtype": "function"}, "init": {"description": "Start polling", "guessedname": "init", "guessedtype": "function"}}, "extends": "AjaxConnection", "superclass": "AjaxConnection", "file": "net.js", "guessedtype": "function", "shortname": "PollingConnection", "configs": {"onPulse": {"type": "Function", "description": "Function to execute every polling interval.", "guessedname": "onPulse", "guessedtype": "property"}, "matchAny": {"default": "true", "type": "Boolean", "description": "Calls the callback function if ANY of the conditions match. Set to false to match ALL", "guessedname": "matchAny", "guessedtype": "property"}, "params": {"type": "*", "description": "Params to pass to the file being polled.", "guessedname": "params", "guessedtype": "property"}, "onSuccess": {"type": "Function", "description": "Success handler when conditions have been met", "guessedname": "onSuccess", "guessedtype": "property"}, "interval": {"default": "18000", "type": "Number", "description": "Time between polling attempts in ms", "guessedname": "interval", "guessedtype": "property"}}, "description": "Polls a specified url for a value"}, "F.Array": {"name": "F.Array", "namespace": "F", "module": "Utils", "guessedname": "Array", "methods": {"max": {"return": {"type": "Number", "description": "max element in array"}, "params": [{"type": "Array", "name": "ipArray", "description": " input array"}], "description": "Max of elements in array", "guessedname": "max", "guessedtype": "function"}, "copy": {"return": {"type": "Array", "description": "copy of input"}, "params": [{"type": "Array", "name": "ipArray", "description": ""}], "description": "Non-destructive array copy", "guessedname": "copy", "guessedtype": "function"}, "contains": {"return": {"type": "Boolean", "description": "true if found"}, "params": [{"type": "value", "name": "value", "description": " to search for"}, {"type": "Array", "name": "ipArray", "description": " input array"}], "description": "Checks if item is in array", "guessedname": "contains", "guessedtype": "function"}, "min": {"return": {"type": "Number", "description": "min element in array"}, "params": [{"type": "Array", "name": "ipArray", "description": " input array"}], "description": "Min of elements in array", "guessedname": "min", "guessedtype": "function"}}, "static": "", "file": "utils.js", "guessedtype": "property", "shortname": "Array", "description": "Array utility functions"}, "F.API.APIConnection": {"name": "F.API.APIConnection", "constructors": [{"params": [{"type": "String", "name": "url", "description": " API location"}, {"type": "String|Array|Object|HTMLElem|Mixed", "name": "params", "description": "  URLParams to be included as part of the url string"}, {"type": "Object", "name": "settings", "description": " Additional settings to be passed to ajax conn object. Use to define error handlers"}], "description": "Wrapper around AjaxConnection specifically for talking to any Simulate API"}], "namespace": "F.API", "module": "Net", "guessedname": "APIConnection", "extends": "AjaxConnection", "superclass": "AjaxConnection", "file": "Api.js", "guessedtype": "function", "shortname": "APIConnection", "requires": "AjaxConnection, F, F.APIUtils", "configs": {"target": {"type": "String", "description": "Return this file on success", "guessedname": "target", "guessedtype": "property"}}, "description": "Wrapper around AjaxConnection specifically for talking to any Simulate API"}, "F.API.Data": {"name": "F.API.Data", "namespace": "F.API", "module": "API", "guessedname": "Data", "methods": {"save": {"params": [{"type": "Mixed", "name": "params", "description": " stuff to save"}], "description": "Save values to the data API. Assume object is single tuple as in \"a=b\" or \"{a:b}\" which posts 'b' to <URL>/a", "guessedname": "save", "guessedtype": "function"}}, "static": "", "file": "Api.js", "guessedtype": "function", "shortname": "Data", "configs": {"onConnect": {"type": "Function", "description": "Execute on connection established", "guessedname": "onConnect", "guessedtype": "property"}}, "description": "Perform operations on the Data API"}, "F.APIUtils": {"name": "F.APIUtils", "namespace": "F", "module": "API", "guessedname": "APIUtils", "methods": {"getURL": {"return": {"type": "String", "description": "absolute path to API"}, "params": [{"type": "String", "name": "apiType", "description": "  Currently run||archive||data||auth"}], "description": "Enter in api type to get url", "guessedname": "getURL", "guessedtype": "function"}}, "static": "", "file": "Api.js", "guessedtype": "function", "shortname": "APIUtils", "properties": {"userPath": {"type": "String", "description": "Simulation author", "guessedname": "userPath", "guessedtype": "property"}, "domain": {"type": "String", "description": "Domain of the sim", "guessedname": "domain", "guessedtype": "property"}, "simPath": {"type": "String Name of sim", "description": "Simulation name", "guessedname": "simPath", "guessedtype": "property"}, "protocol": {"type": "String", "description": "Protocol used", "guessedname": "protocol", "guessedtype": "property"}, "simulatePath": {"type": "String", "description": "section of URL referencing simulate", "guessedname": "simulatePath", "guessedtype": "property"}}, "description": "Utility functions for the API adaptors"}, "F.String": {"name": "F.String", "namespace": "F", "module": "Utils", "guessedname": "String", "methods": {"equalsIgnoreCase": {"return": {"type": "Boolean", "description": "flag set to true if they're equal"}, "params": [{"type": "String", "name": "str1", "description": ""}, {"type": "String", "name": "str2", "description": " the strings to check"}], "description": "Compares strings (or numbers) regardless of case", "guessedname": "equalsIgnoreCase", "guessedtype": "function"}, "isValidEmail": {"return": {"type": "Boolean", "description": "true if email is valid"}, "description": "Checks if string is a valid email address", "params": [{"type": "String", "name": "ipString", "description": ""}, {"type": "Object", "name": "settings", "description": " @see isValid for options"}], "guessedname": "isValidEmail", "guessedtype": "function", "extends": "isValid"}, "clean": {"return": {"type": "String", "description": "the 'clean' string"}, "params": [{"type": "String", "name": "ipString", "description": " The string to clean"}], "description": "Strips tabs, carriage returns and empty lines from a string.", "guessedname": "clean", "guessedtype": "function"}, "isValid": {"return": {"type": "Boolean", "description": "true if string is valid"}, "params": [{"type": "String", "name": "ipString", "description": " the string to validate"}, {"type": "Object", "name": "settings", "description": ""}], "description": "Tests a string for blank/ maxLength. Useful for input validations.", "guessedname": "isValid", "guessedtype": "function"}}, "static": "", "file": "utils.js", "guessedtype": "property", "shortname": "String", "description": "Stringy functions"}, "F.Net": {"name": "F.Net", "namespace": "F", "module": "Utils", "guessedname": "Net", "methods": {"combineQueryStrings": {"return": {"type": "String", "description": "combined querystring"}, "params": [{"type": "*", "name": "oldQs", "description": ""}, {"type": "*", "name": "newQs", "description": ""}, {"type": "Boolean", "name": "overwrite", "description": " If true, combining a=b and a=c will return a=b&a=c; else will return a=c"}], "description": "Combines two query strings;", "guessedname": "combineQueryStrings", "guessedtype": "function"}, "goToURL": {"params": [{"type": "String", "name": "url", "description": ""}], "description": "Changes the window location to the url", "guessedname": "goToURL", "guessedtype": "function"}}, "static": "", "file": "utils.js", "guessedtype": "property", "shortname": "Net", "description": "Networking utilities"}, "F.API.Archive": {"name": "F.API.Archive", "namespace": "F.API", "module": "Net", "guessedname": "UserGroup", "methods": {"sendPassword": {"params": [{"type": "String", "name": "loginid", "description": " login of user to retreive for"}, {"type": "Function", "name": "callback", "description": " function (optional)"}, {"type": "*", "name": "options", "description": " (optional)"}], "description": "Email lost passwords. For use by admins", "guessedname": "sendPassword", "guessedtype": "function"}}, "static": "", "file": "AdminApi.js", "guessedtype": "function", "shortname": "Archive", "description": "Archive API operations. \r\nSee http://sites.google.com/a/forio.com/documentation/api-documentation/api-archive for list of supported params"}, "F.XML": {"name": "F.XML", "namespace": "F", "module": "Utils", "guessedname": "XML", "methods": {"toString": {"return": {"type": "String", "description": ""}, "params": [{"type": "XML", "name": "node", "description": ""}], "description": "Converts XML/ Dom list to string", "guessedname": "toString", "guessedtype": "function"}}, "static": "", "file": "utils.js", "guessedtype": "property", "shortname": "XML", "description": "XML utility functions"}, "ClipBoard": {"name": "ClipBoard", "configs": {"text": {"default": "'Copy to Clipboard'", "type": "String", "description": "Text to be displayed in the Button", "guessedname": "text", "guessedtype": "property"}, "onSuccess": {"default": "\"ClipBoard.copySuccess\"", "type": "String", "description": "Success handler on successful copy; Displays an alert/Dialog by default", "guessedname": "onSuccess", "guessedtype": "property"}, "datasource": {"default": "ClipBoard.copyTable('.dataTable')", "type": "String", "description": "Function the SWF calls to get data; Override if you want copy fancy formatted data etc", "guessedname": "datasource", "guessedtype": "property"}, "onFailure": {"default": "\"ClipBoard.copyFailure\"", "type": "String", "description": "Failure handler on failed copy; Displays an alert/Dialog by default", "guessedname": "onFailure", "guessedtype": "property"}, "icon": {"default": "\"../img/page_white_paste.png\"", "type": "String", "description": "Path to icon for copy image", "guessedname": "icon", "guessedtype": "property"}}, "namespace": "", "module": "Widgets", "guessedname": "ClipBoard", "methods": {"clone": {"params": [{"type": "String", "name": "domId", "description": "  (Optional)  - Use if you want to render the chart to a diff place than init."}, {"type": "Object", "name": "settings", "description": "  (Optional) - See config"}], "description": "Initializes a second instance of the button", "guessedname": "clone", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "domId", "description": "   - Elem where swf should be placed."}, {"type": "Object", "name": "settings", "description": "  (Optional)  See config attributes"}, {"type": "Object} (Optional) Dom dimenstions of the form {width: x; height: x", "name": "dimensions", "description": ""}], "description": "Initialization fn. Use Clipboard.swf?debug=true to print debug info to trace/console", "guessedname": "init", "guessedtype": "function"}, "copySuccess": {"private": "", "description": "Default success handler. Called by Flash. Can be overriden through additional param to 'render'", "guessedname": "copySuccess", "guessedtype": "function"}, "copyTable": {"return": {"type": "String", "description": "tab/newline delimited data"}, "description": "Specified as default datasource for Flash copy function", "private": "", "params": [{"type": "String", "name": "tableSelector", "description": " jQuerySyntax"}], "guessedname": "copyTable", "guessedtype": "function"}, "copyFailure": {"private": "", "description": "Default failure handler. Called by Flash. Can be overriden through additional param to 'render'", "guessedname": "copyFailure", "guessedtype": "function"}, "onInit": {"private": "", "description": "Called by Flash when the swf is loaded. Needed 'coz onDOMReady doesn't play well with swfs", "guessedname": "onInit", "guessedtype": "function"}}, "static": "", "file": "clipboard.js", "guessedtype": "function", "shortname": "ClipBoard", "example": "var cc = ClipBoard.init('domId');\ncc.render(\"fnToBeCalledOnClick\", \"domIdIfYouWantToCloneIt\");\nor just ClipBoard.init(\"domId\", settings);", "description": "Provides a copy to clipboard flash button. If using on multiple places in a page, init once and clone many times"}, "F.Object": {"name": "F.Object", "namespace": "F", "module": "Utils", "guessedname": "Object", "methods": {"serialize": {"return": {"type": "String", "description": "string repn of the object;"}, "description": "Returns a stringified repn of the object", "params": [], "guessedname": "serialize", "guessedtype": "function", "requires": "YAHOO.lang.JSON"}}, "static": "", "file": "utils.js", "guessedtype": "property", "shortname": "Object", "description": "Object utility functions"}, "Dialogs": {"name": "Dialogs", "namespace": "", "module": "Widgets", "guessedname": "Dialogs", "methods": {"hide": {"description": "Hides the popup from screen", "guessedname": "hide", "guessedtype": "function"}, "_applyConfigAndShow": {"private": "", "guessedname": "_applyConfigAndShow", "guessedtype": "function"}, "show": {"params": [{"type": "String|HTML", "name": "text", "description": " stuff to display in the popup"}, {"type": "Function", "name": "callBackFn", "description": " Executed on dialog close by default; Closes the popup if this returns undefined OR true. \r\nDoesn't close for other values. Useful to do validation stuff, especially on \"confirm\" boxes"}, {"type": "Object} options Besides the default YUI dialog options, use {singleton: true", "name": "to", "description": " force only 1 open at a time"}], "description": "Displays the popup box", "guessedname": "show", "guessedtype": "function"}, "_isDialogOpen": {"private": "", "guessedname": "_isDialogOpen", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "divId", "description": " Location to initailze dialog. Saves time if the div is already in YUI form;\r\n<textarea>\r\n<div id=\"container\">\r\n<div class=\"hd\"> Your Header </div>\r\n<div class=\"bd\"> Your Body </div>\r\n<div class=\"ft\"> Foorter text </div>\r\n</div>\r\n</textarea>"}, {"type": "String", "name": "backupDiv", "description": " By default you get one popup per app; Older one closes if new one comes in;\r\nGive another \"backup\" id if you want two at a time"}], "guessedname": "init", "guessedtype": "function"}, "showAlert": {"params": [{"type": "HTML", "name": "text", "description": ""}, {"type": "Function", "name": "callBackFn", "description": "  Have this false to stop dialog from closing; Useful for validators."}, {"type": "Object", "name": "options", "description": " <optional>"}], "guessedname": "showAlert", "guessedtype": "function"}, "showModal": {"params": [{"type": "String|HTML", "name": "text", "description": " stuff to display in the popup"}, {"type": "Function", "name": "callBackFn", "description": " Executed on dialog close by default"}, {"type": "Object} options Besides the default YUI dialog options, use {singleton: true", "name": "to", "description": " have 1 at a time"}], "description": "Shows a modal popup; same as calling show with {modal:true}", "guessedname": "showModal", "guessedtype": "function"}, "_executeFnAndHide": {"private": "", "guessedname": "_executeFnAndHide", "guessedtype": "function"}}, "extends": "YAHOO.widget.SimpleDialog", "superclass": "YAHOO.widget.SimpleDialog", "file": "dialogs.js", "guessedtype": "property", "static": "", "shortname": "Dialogs", "configs": {"singleton": {"default": "false", "type": "Boolean", "description": "Allow only one instance of dialog at a time", "guessedname": "singleton", "guessedtype": "property"}}, "description": "Handy popup as an alternative to ugly HTML alerts. Oh, and it also does callbacks."}, "AjaxConnection": {"return": "{}", "name": "AjaxConnection", "constructors": [{"params": [{"type": "String", "name": "url", "description": " url to connect to"}, {"type": "Object", "name": "settings", "description": " Configuration options; see configs section below for values"}, {"type": "Object", "name": "ajaxOptions", "description": " default jQuery ajax options"}], "description": "Use for all ajax-y stuff within simulations. Among other benefits, it re-tries connections on failure, does param parsing etc."}], "namespace": "", "module": "Net", "guessedname": "AjaxConnection", "methods": {"connect": {"description": "Rudimentary connection; Use if u need to override gets or posts; use 'data' for params and other standard Jquery options", "callback": "{Function} Callback function (optional)", "params": [{"type": "*", "name": "params", "description": " parameters to pass through"}], "guessedname": "connect", "guessedtype": "function", "optional": "{Object} configuration options"}, "post": {"description": "Ajax POST", "callback": "{Function} Callback function (optional)", "params": [{"type": "*", "name": "params", "description": " parameters to pass through"}], "guessedname": "post", "guessedtype": "function", "optional": "{Object} configuration options"}, "getHTML": {"description": "GET but callback gets called with HTML. Use for navigation", "callback": "{Function} Callback function (optional)", "params": [{"type": "*", "name": "params", "description": " parameters to pass through"}], "guessedname": "getHTML", "guessedtype": "function", "optional": "{Object} configuration options"}, "getJSON": {"description": "GET but callback gets called with an object instead of a string", "callback": "{Function} Callback function (optional)", "params": [{"type": "*", "name": "params", "description": " parameters to pass through"}], "guessedname": "getJSON", "guessedtype": "function", "optional": "{Object} configuration options"}, "get": {"description": "Do a GET request", "callback": "{Function} Callback function (optional)", "params": [{"type": "*", "name": "params", "description": " parameters to pass through"}], "guessedname": "get", "guessedtype": "function", "optional": "{Object} configuration options"}}, "file": "net.js", "guessedtype": "function", "shortname": "AjaxConnection", "configs": {"reconnectInterval": {"default": "2000", "type": "Number", "description": "Time between reconnection attempts", "guessedname": "reconnectInterval", "guessedtype": "property"}, "onError": {"type": "Function", "description": "Error handler. By default shows the error message in an alert, and logs to console if possible", "guessedname": "onError", "guessedtype": "function"}, "allowRedirect": {"default": "false", "type": "Boolean", "description": "If true, the call redirects to the login page on access denied errors; else it calls the error handlers", "guessedname": "allowRedirect", "guessedtype": "property"}, "onSuccess": {"type": "Function", "description": "Success handler. Called with response", "guessedname": "onSuccess", "guessedtype": "property"}, "onComplete": {"type": "Function", "description": "Request termination handler; called regardless of success or failure", "guessedname": "onComplete", "guessedtype": "property"}, "tries": {"default": "2", "type": "Number", "description": "The no. of times to retry request before calling error handler", "guessedname": "tries", "guessedtype": "property"}, "preloadCondition": {"type": "Function", "description": "Connection not made till this function returns true; Used to remove swfs off page for ie, and maybe for validation before posting", "guessedname": "preloadCondition", "guessedtype": "function"}, "parameterParser": {"type": "Function", "description": "Run the query params through this function before posting it; use F.makeQueryString in most cases. TODO:// should i default to this?", "guessedname": "parameterParser", "guessedtype": "function"}}, "description": "Use for all ajax-y stuff within simulations. Among other benefits, it re-tries connections on failure, does param parsing etc."}, "F.": {"name": "F.", "namespace": "F", "module": "Utils", "guessedname": "F", "static": "", "file": "utils.js", "guessedtype": "function", "shortname": "", "configs": {"{String} prefix D_ or something to append to every item in the list. Doesnt add if already there": {"guessedname": "makeQueryString", "return": "{String} querystring", "description": "Converts anything to a url-ready string", "param": "{String||HTMLElement||Object||Array||Mixed} paramList input to convert", "guessedtype": "function"}}, "methods": {"isArray": {"return": {"type": "Boolean", "description": ""}, "description": "Check if inputs are arrays; fails if any of the params aren't", "uses": "$.isArray", "guessedname": "isArray", "guessedtype": "function", "params": [{"type": "String", "name": "Pass", "description": " in as many inputs you want to check"}]}, "isString": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "String", "name": "Pass", "description": " in as many inputs you want to check"}], "description": "Check if inputs are strings; fails if any of the params aren't", "guessedname": "isString", "guessedtype": "function"}, "makeObject": {"return": {"type": "Object", "description": ""}, "params": [{"type": "String||HTMLElement||Object||Array", "name": "paramList", "description": " input to convert"}, {"type": "Object", "name": "options", "description": " @see makeQueryString"}], "description": "Converts anything to an object literal", "guessedname": "makeObject", "guessedtype": "function"}, "isEmpty": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "*", "name": "0", "description": " input to check"}], "description": "Check if inputs is 'emtpy', as opposed to undefined; i.e blank strings, empty objects, 0 elem arrays", "guessedname": "isEmpty", "guessedtype": "function"}, "isElement": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "*", "name": "o", "description": " Item to check"}, {"type": "String", "name": "type", "description": " pass in type to add an additional level of constraint checking; defaults to 'any'"}], "description": "Check if inputs is HTMLElement", "guessedname": "isElement", "guessedtype": "function"}, "isNumber": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "String", "name": "Pass", "description": " in as many inputs you want to check"}], "description": "Check if inputs are numbers; fails if any of the params aren't", "guessedname": "isNumber", "guessedtype": "function"}, "isObject": {"return": {"type": "Boolean", "description": ""}, "description": "Check if inputs are strings; fails if any of the params aren't\r\nDoes NOT return true for objects created with new keyword or anything but obj literals", "uses": "$.isPlainObject", "guessedname": "isObject", "guessedtype": "function", "params": [{"type": "String", "name": "Pass", "description": " in as many inputs you want to check"}]}}}}, "version": "1.0.0", "namespaces": ["F.API", "F", ""]}